class FragmentApiController < ApplicationController
  helper FragmentAPIHelper
  before_action :set_game_sync, except: [:start]

  def update_program

  end

  def validate
    #Compare client time against server time
    #if params.has_key?(:client_time)
    # time_sync_offset = @game_sync.start_time - params[:client_time]
    #  if (time_sync_offset - @game_sync.time_offset) < 1.0

    #  end
    #else
    #  return false
    #end
    return true
  end

  def compile
    respond_to do |format|
      format.js begin
        javascript = "alert('Compilation Error', 'Compile process aborted');"
        program = Program.find_by_id(params[:program_id])
        if program.nil?
          return "alert('Compilation Error', 'Could not compile unknown program');"
        else
          ordered_blocks = program.blocks.sort do |a, b|
            case
            when a.sequence < b.sequence
              -1
            when a.sequence > b.sequence
              1
            else
                a <=> b
            end

          end
          javascript = self.blocks_to_js(ordered_blocks)
        end
        js_header = "//Autogenerated by f.ragment\n"
        program.javascript = js_header + javascript
        render {js: program.javascript}
      end
    end
  end

  def start
    #Check to see that we have already started a game
    game = Game.find_by_id(params[:game_id])
    if game.nil?
      self.game_error()
    else
      #Setup a game sync object
      game_sync = GameSync.create_with_params(params)

    end

  end

  def pause
    #Check to see that we are not already paused
  end

  def fragment_block

  end

  private

  #Internal functions

  def set_game_sync
    @game_sync = GameSync.find_by_id(params[:game_id])
    if @game_sync.nil?
      self.game_error()
    end
  end

  def api_error
    redirect_to controller: :games, view: :index, flash: { error: "Game synchronization error"}
  end

  # Never trust parameters from the scary internet, only allow the white list through.
  def fragment_api_params
    params.require(:game_id).permit(:user_id, :multiplayer_id, :client_time, :client_pause, :program_id)
  end

  

end
